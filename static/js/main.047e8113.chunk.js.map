{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/constants.js","components/TodosFilter/TodosFilter.jsx","components/TodoApp/TodoApp.jsx","App.js","index.js"],"names":["TodoItem","todo","handleDelete","changeCompleted","changeTitle","useState","editing","setEditing","newTitle","setNewTitle","className","classNames","completed","type","checked","onChange","id","onDoubleClick","title","onClick","autoFocus","defaultValue","event","target","value","trimLeft","onKeyDown","key","onBlur","TodoList","todos","map","FILTER","TodosFilter","filter","setFilter","href","selected","TodoApp","setTodos","query","setQuery","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","todosFiltered","useMemo","markAllCompleted","every","onSubmit","preventDefault","placeholder","onKeyUp","Date","length","htmlFor","some","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.047e8113.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({\n  todo, handleDelete, changeCompleted, changeTitle,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n\n  const handleChange = (event) => {\n    setNewTitle(event.target.value.trimLeft());\n  };\n\n  const handleEdit = (event) => {\n    if (event.key === 'Enter' && newTitle) {\n      changeTitle(todo.id, newTitle);\n      setEditing(false);\n      setNewTitle('');\n    } else if (event.key === 'Enter' && !newTitle) {\n      handleDelete(todo.id);\n    }\n\n    if (event.key === 'Escape') {\n      setNewTitle('');\n      setEditing(false);\n    }\n  };\n\n  const handleSaveChanges = () => {\n    if (newTitle) {\n      changeTitle(todo.id, newTitle);\n      setEditing(false);\n      setNewTitle('');\n    } else {\n      setEditing(false);\n      setNewTitle('');\n    }\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => changeCompleted(todo.id)}\n        />\n        <label\n          onDoubleClick={() => setEditing(true)}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => handleDelete(todo.id)}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={todo.title}\n          onChange={handleChange}\n          onKeyDown={handleEdit}\n          onBlur={handleSaveChanges}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  todos,\n  changeCompleted,\n  changeTitle,\n  handleDelete,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        changeTitle={changeTitle}\n        handleDelete={handleDelete}\n        changeCompleted={changeCompleted}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n","export const FILTER = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FILTER } from '../constants';\n\nexport const TodosFilter = ({ filter, setFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({\n          selected: filter === FILTER.all,\n        })}\n        onClick={() => setFilter(FILTER.all)}\n      >\n        {FILTER.all}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({\n          selected: filter === FILTER.active,\n        })}\n        onClick={() => setFilter(FILTER.active)}\n      >\n        {FILTER.active}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({\n          selected: filter === FILTER.completed,\n        })}\n        onClick={() => setFilter(FILTER.completed)}\n      >\n        {FILTER.completed}\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\nimport { FILTER } from '../constants';\n\nexport const TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState('All');\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const todosFiltered = useMemo(() => {\n    switch (filter) {\n      case FILTER.active:\n        return todos.filter(todo => !todo.completed);\n\n      case FILTER.completed:\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos;\n    }\n  }, [todos, filter]);\n\n  const changeCompleted = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    }));\n  };\n\n  const changeTitle = (id, newTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        title: newTitle,\n      };\n    }));\n  };\n\n  const markAllCompleted = () => {\n    if (todos.every(todo => todo.completed)) {\n      setTodos(todos.map(todo => (\n        {\n          ...todo,\n          completed: !todo.completed,\n        }\n      )));\n    } else {\n      setTodos(todos.map((todo) => {\n        if (!todo.completed) {\n          return { ...todo, completed: true };\n        }\n\n        return todo;\n      }));\n    }\n  };\n\n  const handleChange = (event) => {\n    setQuery(event.target.value.trimLeft());\n  };\n\n  const handleAddTodo = () => {\n    if (query) {\n      setTodos([{\n        id: +new Date(),\n        title: query,\n        completed: false,\n      }, ...todos]);\n      setQuery('');\n    }\n  };\n\n  const handleDeleteTodo = (id) => {\n    setTodos(\n      todos.filter(todo => todo.id !== id),\n    );\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={query}\n            onChange={handleChange}\n            onKeyUp={(event) => {\n              if (event.key === 'Enter') {\n                handleAddTodo();\n              }\n            }}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={markAllCompleted}\n              checked={todos.every(todo => todo.completed)}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              todos={todosFiltered}\n              changeTitle={changeTitle}\n              handleDelete={handleDeleteTodo}\n              changeCompleted={changeCompleted}\n              markAllCompleted={markAllCompleted}\n            />\n\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${todos.filter(todo => !todo.completed).length} items left`}\n            </span>\n\n            <TodosFilter\n              todos={todos}\n              filter={filter}\n              setFilter={setFilter}\n            />\n\n            {(todos.some(todo => todo.completed)) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setTodos(\n                  todos.filter(todo => !todo.completed),\n                )}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <TodoApp />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}